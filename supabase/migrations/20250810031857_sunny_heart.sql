/*
  # Create chat_messages table

  1. New Tables
    - `chat_messages`
      - `id` (bigint, primary key)
      - `thread_id` (uuid, foreign key to chat_threads)
      - `user_id` (uuid, foreign key to auth.users)
      - `role` (text - message role: user, assistant)
      - `content` (text - message content)
      - `metadata` (jsonb - additional message data)
      - `created_at` (timestamp)

  2. Security
    - Enable RLS on `chat_messages` table
    - Add policy for users to manage messages in their own threads
*/

CREATE TABLE IF NOT EXISTS chat_messages (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  thread_id uuid REFERENCES chat_threads(id) ON DELETE CASCADE NOT NULL,
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  role text NOT NULL,
  content text NOT NULL,
  metadata jsonb,
  created_at timestamptz DEFAULT now()
);

ALTER TABLE chat_messages ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can manage messages in own threads"
  ON chat_messages
  FOR ALL
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM chat_threads 
      WHERE chat_threads.id = chat_messages.thread_id 
      AND chat_threads.user_id = auth.uid()
    )
  )
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM chat_threads 
      WHERE chat_threads.id = chat_messages.thread_id 
      AND chat_threads.user_id = auth.uid()
    )
  );

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS chat_messages_thread_id_idx ON chat_messages(thread_id);
CREATE INDEX IF NOT EXISTS chat_messages_user_id_idx ON chat_messages(user_id);
CREATE INDEX IF NOT EXISTS chat_messages_created_at_idx ON chat_messages(created_at);