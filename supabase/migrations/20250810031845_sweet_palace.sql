/*
  # Create sandbox_states table

  1. New Tables
    - `sandbox_states`
      - `id` (bigint, primary key)
      - `user_id` (uuid, foreign key to auth.users)
      - `course_id` (bigint, foreign key to courses)
      - `module_id` (bigint, foreign key to modules)
      - `lesson_id` (bigint, foreign key to lessons)
      - `state` (jsonb - sandbox state data)
      - `version` (integer - state version)
      - `created_at` (timestamp)
      - `updated_at` (timestamp)

  2. Security
    - Enable RLS on `sandbox_states` table
    - Add policy for users to manage their own sandbox states

  3. Constraints
    - Unique constraint on user_id, course_id, module_id, lesson_id
*/

CREATE TABLE IF NOT EXISTS sandbox_states (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  course_id bigint REFERENCES courses(id) ON DELETE CASCADE NOT NULL,
  module_id bigint REFERENCES modules(id) ON DELETE CASCADE NOT NULL,
  lesson_id bigint REFERENCES lessons(id) ON DELETE CASCADE NOT NULL,
  state jsonb NOT NULL,
  version integer DEFAULT 1 NOT NULL,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  UNIQUE (user_id, course_id, module_id, lesson_id)
);

ALTER TABLE sandbox_states ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can manage own sandbox states"
  ON sandbox_states
  FOR ALL
  TO authenticated
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS sandbox_states_user_id_idx ON sandbox_states(user_id);
CREATE INDEX IF NOT EXISTS sandbox_states_lesson_id_idx ON sandbox_states(lesson_id);