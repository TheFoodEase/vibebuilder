/*
  # Create events table

  1. New Tables
    - `events`
      - `id` (bigint, primary key)
      - `user_id` (uuid, foreign key to auth.users)
      - `course_id` (bigint, foreign key to courses)
      - `module_id` (bigint, foreign key to modules)
      - `lesson_id` (bigint, foreign key to lessons)
      - `event_type` (text - type of event)
      - `payload` (jsonb - event data)
      - `created_at` (timestamp)

  2. Security
    - Enable RLS on `events` table
    - Add policy for users to view their own events
    - Add policy for users to create their own events
    - Add policy for admins to view all events
*/

CREATE TABLE IF NOT EXISTS events (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  course_id bigint REFERENCES courses(id) ON DELETE CASCADE,
  module_id bigint REFERENCES modules(id) ON DELETE CASCADE,
  lesson_id bigint REFERENCES lessons(id) ON DELETE CASCADE,
  event_type text NOT NULL,
  payload jsonb,
  created_at timestamptz DEFAULT now()
);

ALTER TABLE events ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view own events"
  ON events
  FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

CREATE POLICY "Users can create own events"
  ON events
  FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Admins can view all events"
  ON events
  FOR SELECT
  TO authenticated
  USING ((auth.jwt() ->> 'user_role'::text) = 'admin'::text);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS events_user_id_idx ON events(user_id);
CREATE INDEX IF NOT EXISTS events_course_id_idx ON events(course_id);
CREATE INDEX IF NOT EXISTS events_event_type_idx ON events(event_type);
CREATE INDEX IF NOT EXISTS events_created_at_idx ON events(created_at);