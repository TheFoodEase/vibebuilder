/*
  # Create enrollments table

  1. New Tables
    - `enrollments`
      - `id` (bigint, primary key)
      - `user_id` (uuid, foreign key to auth.users)
      - `course_id` (bigint, foreign key to courses)
      - `status` (text - enrollment status)
      - `created_at` (timestamp)
      - `updated_at` (timestamp)

  2. Security
    - Enable RLS on `enrollments` table
    - Add policy for users to view their own enrollments
    - Add policy for users to manage their own enrollments
    - Add policy for admins to manage all enrollments

  3. Constraints
    - Unique constraint on user_id and course_id combination
*/

CREATE TABLE IF NOT EXISTS enrollments (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  course_id bigint REFERENCES courses(id) ON DELETE CASCADE NOT NULL,
  status text NOT NULL DEFAULT 'enrolled',
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  UNIQUE (user_id, course_id)
);

ALTER TABLE enrollments ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view own enrollments"
  ON enrollments
  FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

CREATE POLICY "Users can manage own enrollments"
  ON enrollments
  FOR ALL
  TO authenticated
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Admins can manage all enrollments"
  ON enrollments
  FOR ALL
  TO authenticated
  USING ((auth.jwt() ->> 'user_role'::text) = 'admin'::text)
  WITH CHECK ((auth.jwt() ->> 'user_role'::text) = 'admin'::text);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS enrollments_user_id_idx ON enrollments(user_id);
CREATE INDEX IF NOT EXISTS enrollments_course_id_idx ON enrollments(course_id);
CREATE INDEX IF NOT EXISTS enrollments_status_idx ON enrollments(status);